set print pretty on
set print element 0
set pagination off

define dump_list
	if $argc != 1
		help dump_list
	else
		set $list_head = $arg0
	end
	
	set $total_list_nodes = 0
	set $node = $list_head

	printf "num\tnode\t\tprev\t\tnext\n"

	while (({struct list_head}$node).next != $list_head)
		set $total_list_nodes++
		printf "%d\t%p\t%p\t%p\n", $total_list_nodes, $node,\
		({struct list_head}$node).prev, ({struct list_head}$node).next

		set $node = ({struct list_head}$node).next
	end
end

document dump_list
dump_list head_addr
	Dump link list
end

document dump_stack
dump_stack thread_info_addr
	Dump specified task stack info
end

define dump_tasks
	set $total_tasks = 0
	set $offset = (void*)&init_task.tasks - (void*)&init_task
	printf "task_struct.tasks offset from task_struct: 0x%x\n", $offset

	set $node = init_task.tasks.prev

	printf  "PID\ttask_struct\tthead_info\tsp:size\t\t\tcmd\n"
	printf  "--------------------------------------------------------------------\n"

	while (1)
		set $task = (struct task_struct*)((void*)$node->next - $offset)

		if ($argc == 1)
			if ($arg0 == $task->pid)
			printf  "%06d\t%p\t%p\t0x%08x:0x%04x\t%s\n", $task->pid, $task, $task->stack, \
					((struct thread_info*)($task->stack))->cpu_context.sp,\
					(unsigned int)($task->stack) + 8192 - ((struct thread_info*)($task->stack))->cpu_context.sp,\
					$task->comm
			end
		else
			printf  "%06d\t%p\t%p\t0x%08x:0x%04x\t%s\n", $task->pid, $task, $task->stack, \
					((struct thread_info*)($task->stack))->cpu_context.sp,\
					(unsigned int)($task->stack) + 8192 - ((struct thread_info*)($task->stack))->cpu_context.sp,\
					$task->comm
		end

		set $total_tasks++

		set $node = $node->next
		if ($node->next == init_task.tasks.prev->next)
			loop_break
		end
	end

	printf  "total tasks: %d\n", $total_tasks
	printf  "current task pid: %d\n", ((struct thread_info*)((unsigned int)$sp & ~(8192 - 1)))->task->pid
	printf  "sp top: thread_info_addr + 0x2000(8192)\n"
	printf  "--------------------------------------------------------------------\n"
end

document dump_tasks
dump_tasks [task_pid]
	Dump all or specified pid task info: PID TASK_STRUCT_ADDR THERAD_INFO_ADDR SP:SIZE CMD
end


##################### OPENOCD COMMANDS ##############################

# dispay current cpu core id
define core-id
	maint packet jc
end

# force display of coreid 0
define core-id0 
	printf "switch to cpu core id 0\n"
	maint packet Jc0
	continue
	main packet Jc-1
end

# force display of coreid 1
define core-id1 
	printf "switch to cpu core id 1\n"
	maint packet Jc1
	continue
	main packet Jc-1
end

#####################################################################
